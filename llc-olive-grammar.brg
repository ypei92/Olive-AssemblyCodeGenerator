%{
/*
   FILE: sample4.brg
  
   Copyright (c) 1997 Princeton University

   All rights reserved.

   This software is to be used for non-commercial purposes only,
   unless authorized permission to do otherwise is obtained.  
   For more information, contact spam@ee.princeton.edu
*/

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <llvm/IR/Instruction.h>
#include <llvm/IR/Instructions.h>
//#include "/home1/04012/ypei/llvm/include/llvm/IR/Instruction.h"
//#include "/home1/04012/ypei/llvm/include/llvm/IR/Instructions.h"

enum {
    RET=1,
	ADD=11,
    LOAD=30,
    STORE=31,
    IMM=996
};

typedef struct tree {
	int op;
	struct tree *kids[2];
	int val;
    llvm::Instruction *I;
    char datatype;
	struct { struct burm_state *state; } x;
} *NODEPTR, *Tree;

#define GET_KIDS(p)	((p)->kids)
#define PANIC printf
#define STATE_LABEL(p) ((p)->x.state)
#define SET_STATE(p,s) (p)->x.state=(s)
#define DEFAULT_COST	break
#define NO_ACTION(x)

typedef struct COST {
    int cost;
} COST;
#define COST_LESS(a,b) ((a).cost < (b).cost)
static COST COST_INFINITY = { 32767 };
static COST COST_ZERO     = { 0 };

typedef struct LoadedMem {
    char* UnderFunName;
    int Offset;
    int TargetReg;
    struct LoadedMem *next;
} LoadedMem;

/*static char* burm_string = "FOO";*/
static int _ern = 0;

static int shouldTrace = 0;
static int shouldCover = 0;
static int registerCounter = 0;
static LoadedMem *LoadedMemHead = NULL;

int OP_LABEL(NODEPTR p) {
	switch (p->op) {
	case IMM:  if (p->val == 0) return 661 /* I0I */;
	default:     return p->op;
	}
}

static void burm_trace(NODEPTR, int, COST);

%}
%term BURP=0 RET=1 ADD=11 LOAD=30 STORE=31 IMM=996
%declare<int> stmt<int indent>;
%declare<int> reg<int indent>;
%declare<int> mem<int indent>;
%declare<int> imm<int indent>;
%%
stmt:	BURP(_,_,_)
	{ return 1; }
	= {
		$immed[2,stmt](10);
	};

stmt:   reg
    { $cost[0].cost=$cost[1].cost; }
    = {
        $action[1](0);
        return 0;
    };

stmt:   mem 
    { $cost[0].cost=$cost[1].cost; }
    = {
        $action[1](0);
        return 0;
    };


reg:    RET(reg)
    { $cost[0].cost=$cost[2].cost+1;}
    = {
		int op0 = $action[2](0);
        printf("    mov %%%d, %%rax\n", op0);
        printf("    mov %%rbp, %%rsp\n");
        printf("    pop %%rbp\n");
        printf("    ret\n");
        return 0;
    };

reg:	ADD(reg,reg)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int op0 = $action[2](0);
		int op1 = $action[3](0);
        printf("    add %%%d, %%%d\n", op0, op1 );
        return op1;
	};

reg:    ADD(LOAD(imm),reg)
	{ $cost[0].cost=$cost[3].cost+$cost[4].cost+1; }
    = {
        int off = $action[3](0);
		int op1 = $action[4](0);
        printf("    add %d(%%rbp), %%%d\n", off, op1 );
        return op1;
    };

reg:	LOAD(imm)
	{ $cost[0].cost=$cost[2].cost+1; }
	= {
        int off = $action[2](0);
        printf("off = %d, $2->val = %d\n", off, $2->val);
        printf("    mov %d(%%rbp) , %%%d\n", $2->val, registerCounter);
        return registerCounter++;
	};

mem:	STORE(imm, imm)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int imm    = $action[2](0);
		int offset = $action[3](0);
        printf("    mov $%d , %d(%%rbp)\n", imm, offset);
        return offset;
	};

imm : IMM
    { $cost[0].cost=0; }
    = {
        return $0->val;
    };
%%

/* burm_trace - print trace message for matching p */
static void burm_trace(NODEPTR p, int eruleno, COST cost) {
	if (shouldTrace)
		std::cerr << "0x" << p << " matched " << burm_string[eruleno] << " = " << eruleno << " with cost " << cost.cost << "\n";
}

static void gen(NODEPTR p) {
	if (burm_label(p) == 0)
		std::cerr << "no cover\n";
	else {
		stmt_action(p->x.state,0);
		if (shouldCover != 0)
			dumpCover(p, 1, 0);
	}
}

static Tree tree(int op, Tree l, Tree r) {
	Tree t = (Tree) malloc(sizeof *t);

	t->op = op;
	t->kids[0] = l; t->kids[1] = r;
	t->val = 0;
	t->x.state = 0;
	return t;
}

/*
int main(int argc, char *argv[]) {
	Tree t;
	int i;

	for (i = 1; i < argc ; ++i) {
		if (strcmp(argv[i], "--cover") == 0){
			shouldCover = 1;
		}
		if (strcmp(argv[i], "--trace") == 0){
			shouldTrace = 1;
		}
	}
	//printf("a = a + b;\n");

	Tree t0= (Tree) malloc(sizeof *t0);
	Tree t1= (Tree) malloc(sizeof *t1);
	Tree t2= (Tree) malloc(sizeof *t2);
	Tree t3= (Tree) malloc(sizeof *t3);
	Tree t4= (Tree) malloc(sizeof *t4);
	Tree t5= (Tree) malloc(sizeof *t5);
	Tree ta= (Tree) malloc(sizeof *ta);
	Tree tb= (Tree) malloc(sizeof *tb);

    t0 -> op = IMM;
    t0 -> val = 1;
    t0 ->kids[0] = 0;
    t0 ->kids[1] = 0;
	t0->x.state = 0;

    t1 -> op = IMM;
    t1 -> val = -8;
    t1 ->kids[0] = 0;
    t1 ->kids[1] = 0;
	t1->x.state = 0;

    t2 -> op = IMM;
    t2 -> val = 2;
    t2 ->kids[0] = 0;
    t2 ->kids[1] = 0;
	t2->x.state = 0;

    t3 -> op = IMM;
    t3 -> val = -16;
    t3 ->kids[0] = 0;
    t3 ->kids[1] = 0;
	t3->x.state = 0;
    
    t4 -> op = STORE;
    t4 -> val = 0;
    t4 ->kids[0] = t0;
    t4 ->kids[1] = t1;
	t4->x.state = 0;

    t5 -> op = STORE;
    t5 -> val = 0;
    t5 ->kids[0] = t2;
    t5 ->kids[1] = t3;
	t5->x.state = 0;
    
    ta-> op = IMM;
    ta -> val = -8;
    ta ->kids[0] = 0;
    ta ->kids[1] = 0;
	ta->x.state = 0;

    tb -> op = IMM;
    tb -> val = -16;
    tb ->kids[0] = 0;
    tb ->kids[1] = 0;
	tb->x.state = 0;
    

	t = tree(ADD, 
             tree(LOAD,
                  tb,
                  0),
             tree(LOAD,
                  ta,
                  0)
		);
    Tree t6 = tree(RET,t,0);

    printf("    .text\n");

    gen(t4);
	gen(t5);
    gen(t6);

    printf("\n");
    printf("    .global main\n");
    printf("main:\n");
    printf("    push %%rbp\n");
    printf("    mov %%rsp, %%rbp\n");
    printf("    call _Your_main\n");
    printf("    mov %%rbp, %%rsp\n");
    printf("    pop %%rbp\n");
    printf("    ret\n");

    printf("\n");
    printf("    .data\n");
    // traverse the table for global value
    // for printf("g_%s: .qual 0\n", g->val);
	return 0;
}
*/
